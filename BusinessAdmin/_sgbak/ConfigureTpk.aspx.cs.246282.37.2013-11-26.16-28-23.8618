using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.IO;
using System.Web.UI.HtmlControls;
using System.Net;
using System.Net.Mail;
using System.Drawing;
using System.Web.Profile;

using e_Travel.Class;
using e_TravelBLL.TourPackage;

using Sibin.FrameworkExtensions.DotNet.Web;
//For Converting Json Object
using Newtonsoft.Json;
//For PDF
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html.simpleparser;



namespace e_Travel.BusinessAdmin
{
    public partial class ConfigureTpk : AdminBasePage
    {
        #region Private Variables
        TpkPackageMst objPackage;
        
        #endregion

        #region PageLoad Event
        protected void Page_Load(object sender, EventArgs e)
        {
            checkBusinessID();
            if (!IsPostBack)
            {
                if (Request.QueryString["TPKID"] == null)
                {
                    Response.Redirect("~/BusinessAdmin/SearchTpk.aspx");
                }
                else
                {
                    LoadPackageBasicDetails();
                    LoadPackageItinerayDetails();
                    LoadAccomodationType();
                    LoadRoomPlanName();
                    AutoSuggestVehicleType();
                    LoadPhotoGallery();
                }
            }
        }

        #endregion

        #region Load Package Details
        private void LoadPackageBasicDetails()
        {
            objPackage = new TpkPackageMst();
            try
            {
                DataTable dt = new DataTable();
                if (Request.QueryString["TPKID"] != null)
                {
                    string ID = Request.QueryString["TPKID"];
                    dt = objPackage.GetPackageDetailsByTpkID(ID);
                    ViewState["PackageDetails"] = dt;
                }
                else
                {
                    Response.Redirect("~/BusinessAdmin/TourPackage.aspx");
                }
                ViewState["PackageDetails"] = dt;
                PackageDetailsFormView.DataSource = dt;
                PackageDetailsFormView.DataBind();
                if (dt.Rows.Count > 0)
                {
                    PackageNameLabel.Text = dt.Rows[0]["TpkName"].ToString();
                    PackageDurationLabel.Text = " (" + dt.Rows[0]["TotalDays"].ToString() + " Days " + dt.Rows[0]["TotalNights"].ToString() + " Nights)";
                }
            }
            catch (Exception)
            {
                WebMessenger.Show(this, "Unable To Load Package Details At this Moment", "Package Details", DialogTypes.Error);
            }
            finally
            {
                objPackage = null;
            }
        }

        private void LoadPackageItinerayDetails()
        {
            objPackage = new TpkPackageMst();
            try
            {
                DataTable dt = new DataTable();
                if (Request.QueryString["TPKID"] != null)
                {
                    string ID = Request.QueryString["TPKID"];
                    dt = objPackage.GetTpkPackagaeItineraryDtlByTpkID(ID);
                }
                else
                {
                    Response.Redirect("~/BusinessAdmin/TourPackage.aspx");
                }
                ItineraryDetailsFGridView.DataSource = dt;
                ItineraryDetailsFGridView.DataBind();
            }
            catch (Exception ex)
            {
                WebMessenger.Show(this, "Unable To Load Package Itinerary Details At this Moment", "Package Itinerary Details", DialogTypes.Error);
                return;
            }
            finally
            {
                objPackage = null;
            }

        }

        private void LoadPhotoGallery()
        {
            objPackage = new TpkPackageMst();
            try
            {
                DataTable dt = objPackage.GetAllTpkPackagePhotoDtlPaged(1, 100, Session["BusinessID"].ToString(), Request.QueryString["TPKID"].ToString());
                Session["Image"] = dt;

                if (dt.Rows.Count > 0)
                {
                    StringBuilder sb = new StringBuilder();
                    sb.Append("<ul>");
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        //sb.Append("<img src='../WebHandler/DisplayTpkPhotoGallery.ashx?IT=PT&ID=" + dt.Rows[i]["TpkPhotoID"] + " ' width=\"110\" height=\"80\" />");
                        //sb.Append("<li><a href = '../WebHandler/DisplayTpkPhotoGallery.ashx?IT=PT&ID=" + dt.Rows[i]["TpkPhotoID"] + "'><img src='../WebHandler/DisplayTpkPhotoGallery.ashx?IT=PT&ID=" + dt.Rows[i]["TpkPhotoID"] + " ' /><span>Image1</span></a></li>");
                        sb.Append("<li><img src='data:image/png;base64," + Convert.ToBase64String((byte[])dt.Rows[i]["PhotoThumb"]) + "' /></li>");
                    }
                    sb.Append("</ul>");
                    TpPhotoLiteral.Text = sb.ToString();
                }
            }
            catch (Exception ex)
            {
                WebMessenger.Show(this, "Unable To Load Photo Gallery At This Moment", "Error", DialogTypes.Error);
            }
        }

        protected void PhotoAlbumRepeater_ItemDataBound(object sender, RepeaterItemEventArgs e)
        {
            Repeater PhotoAlbumRepeater = sender as Repeater;
            if (PhotoAlbumRepeater.Items.Count < 1)
            {
                if (e.Item.ItemType == ListItemType.Footer)
                {
                    Label lblFooter = (Label)e.Item.FindControl("EmptyDataLabel");
                    lblFooter.Visible = true;
                }
            }
        }

        #endregion

        #region Load Configuration Details
        private void LoadAccomodationType()
        {
            objPackage = new TpkPackageMst();
            try
            {
                DataTable dt = objPackage.GetAccTypeByTpkID(Session["BusinessID"].ToString(), Request.QueryString["TPKID"].ToString());
                
                AccommodationTypeDropDownList.Items.Clear();
                AccommodationTypeDropDownList.Items.Add(new System.Web.UI.WebControls.ListItem("-----Select Accomodation Type -------", "0"));
                AccommodationTypeDropDownList.DataSource = dt;
                AccommodationTypeDropDownList.DataTextField = "AccTypeName";
                AccommodationTypeDropDownList.DataValueField = "AccTypeID";
                AccommodationTypeDropDownList.DataBind();

                AdvanceAccTypeDropDownList.Items.Clear();
                AdvanceAccTypeDropDownList.Items.Add(new System.Web.UI.WebControls.ListItem("-----Select Accomodation Type -------", "0"));
                AdvanceAccTypeDropDownList.DataSource = dt;
                AdvanceAccTypeDropDownList.DataTextField = "AccTypeName";
                AdvanceAccTypeDropDownList.DataValueField = "AccTypeID";
                AdvanceAccTypeDropDownList.DataBind();
               
            }
            catch (Exception)
            {
                WebMessenger.Show(this, "Error While Loading Accomodation Type", "Error", DialogTypes.Error);
                return;
            }
            finally
            {
                objPackage = null;
            }

        }

        private void LoadRoomPlanName()
        {
            objPackage = new TpkPackageMst();
            try
            {
                DataTable dt = objPackage.GetRoomPlanByTpkID(Session["BusinessID"].ToString(), Request.QueryString["TPKID"].ToString());
                RoomPlanDropDownList.Items.Clear();
                RoomPlanDropDownList.Items.Add(new System.Web.UI.WebControls.ListItem("-----Select Room Plan------", "0"));
                RoomPlanDropDownList.DataSource = dt;
                RoomPlanDropDownList.DataValueField = "RoomPlanID";
                RoomPlanDropDownList.DataTextField = "RoomPlanName";
                RoomPlanDropDownList.DataBind();

                AdvanceRoomPlanDropDownList.Items.Clear();
                AdvanceRoomPlanDropDownList.Items.Add(new System.Web.UI.WebControls.ListItem("-----Select Room Plan------", "0"));
                AdvanceRoomPlanDropDownList.DataSource = dt;
                AdvanceRoomPlanDropDownList.DataValueField = "RoomPlanID";
                AdvanceRoomPlanDropDownList.DataTextField = "RoomPlanName";
                AdvanceRoomPlanDropDownList.DataBind();

            }
            catch (Exception)
            {
                WebMessenger.Show(this.Page, "Error Occured While Loading Room Plan Name", "Error", DialogTypes.Error);
                return;
            }
            finally
            {
                objPackage = null;
            }
        }

        public void AutoSuggestVehicleType()
        {
            objPackage = new TpkPackageMst();
            try
            {
                DataTable dt = objPackage.GetVehicleTypeByTpkID(Session["BusinessID"].ToString(), Request.QueryString["TPKID"].ToString());
                string json = Server.HtmlDecode(JsonConvert.SerializeObject(dt));
                VehicleTypeListHiddenField.Value = json;
            }
            catch (Exception ex)
            {
                WebMessenger.Show(this.Page, "Error Occured While Loading VehicleType", "Error", DialogTypes.Error);
                return;
            }
            finally
            {
                objPackage = null;
            }
        }

       
        protected void LoadOverNightDesAcc()
        {
            objPackage = new TpkPackageMst();
            try
            {
                int RecordCount = 0;
                if (AdvanceAccTypeDropDownList.SelectedValue != "0")
                {
                    DataSet ds = objPackage.GetOverNightDestinationByTpkID(Request.QueryString["TPKID"].ToString(), Session["BusinessID"].ToString(),Int64.Parse(AdvanceAccTypeDropDownList.SelectedValue), ref RecordCount);
                    DestinationWiseAccomodationGridView.DataSource = ds.Tables[0];
                    DestinationWiseAccomodationGridView.DataBind();
                    foreach (GridViewRow dr in DestinationWiseAccomodationGridView.Rows)
                    {
                        DropDownList ddl = (DropDownList)dr.FindControl("DestAccomadationDropDownList");
                        ddl.Items.Clear();
                        ddl.Items.Add(new System.Web.UI.WebControls.ListItem("----------Select  Accomadation----------", "0"));
                        ddl.DataSource = ds.Tables[dr.RowIndex + 1];
                        ddl.DataValueField = "AccID";
                        ddl.DataTextField = "AccName";
                        ddl.DataBind();

                    }
                }

            }
            catch (Exception ex)
            {
                WebMessenger.Show(this, "Unable To Load  Destination Accomadation At this Moment", "Accomation", DialogTypes.Error);
            }
            finally
            {
                objPackage = null;
            }
        }

        protected void AdvanceAccTypeDropDownList_SelectedIndexChanged(object sender, EventArgs e)
        {
            ResultTabOpenHiddenField.Value = "";
            LoadOverNightDesAcc();
        }

        #endregion

        #region GridView Functions
        protected string ItineraryTypeText(string ItineraryType)
        {
            if (ItineraryType == "NA")
            {
                return null;
            }
            else if (ItineraryType == "TR")
            {
                return "Transfer ";
            }
            else
            {
                return "Sight Seen";
            }
        }
        
        protected bool ItineraryTypeVisible(string ItineraryType)
        {
            if (ItineraryType == "NA")
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        #endregion

        #region Button Click Event
        protected void BacisPackageConfireButton_Click(object sender, EventArgs e)
        {
            objPackage = new TpkPackageMst();
            try
            {
                BasicAccPanel.Visible = true;
                AdvanceAccPanel.Visible = false;
                ResultTabOpenHiddenField.Value = "Open";
                DataSet VehicleCost, AccCost;
                int totalUser = int.Parse(NoOfAdultDropDownList.SelectedValue.ToString()) + int.Parse(NoOfChildDropDownList.SelectedValue.ToString());

                #region Retrieve Data From Database In DataSet
                AccCost = objPackage.GetPackageAccomodationCostDetailsByAccType(Request.QueryString["TPKID"].ToString(), DateTime.Parse(string.Format("{0:dd-MMM-yyyy}", DateTime.Parse(ArrivalDateTextBox.Text.Trim()))), Int64.Parse(AccommodationTypeDropDownList.SelectedValue), Int64.Parse(RoomPlanDropDownList.SelectedValue.ToString()), SelectedRoomListAdultHiddenField.Value, SelectedRoomListChildHiddenField.Value, SelectedVehicleTypeHiddenField.Value, PaxListForVehicleHiddenField.Value, totalUser, Session["BusinessID"].ToString());
                VehicleCost = objPackage.GetPackageItineraryVehicleCostDetails(Request.QueryString["TPKID"].ToString(), DateTime.Parse(string.Format("{0:dd-MMM-yyyy}", DateTime.Parse(ArrivalDateTextBox.Text.Trim()))), SelectedVehicleTypeHiddenField.Value, PaxListForVehicleHiddenField.Value, Session["BusinessID"].ToString(), totalUser);

                #endregion

                #region  Accomadation
                DataTable dtAccRate = AccCost.Tables[0];
                DataTable dtAccDis = AccCost.Tables[1];
                string[] TobeDistinct = { "DestinationID", "DestinationName", "RoomPlanName" };
                DataTable dtAcc = AccCost.Tables[2];
                DataTable dtAccList = AccCost.Tables[2].DefaultView.ToTable(true, TobeDistinct);
                AccomadationGridView.DataSource = dtAccList;
                AccomadationGridView.DataBind();

                foreach (GridViewRow row in AccomadationGridView.Rows)
                {
                    Int64 DestinationID = Int64.Parse(((Label)row.FindControl("DestinationIDLabel")).Text);
                    DataList dr = ((DataList)row.FindControl("AccListDataList"));
                    dr.DataSource = dtAcc.Select("DestinationID=" + DestinationID).CopyToDataTable(); ;
                    dr.DataBind();
                }

                #endregion

                #region Vehicle Dtls
                DataTable dtVehicleCost = VehicleCost.Tables[0];
                DataTable dtVehicleDis = VehicleCost.Tables[1];

                string[] DayDistinct = { "DayNo" };
                DataTable dtDayList = dtVehicleCost.DefaultView.ToTable(true, DayDistinct);
                VehicleGridView.DataSource = dtDayList;
                VehicleGridView.DataBind();

                foreach (GridViewRow row in VehicleGridView.Rows)
                {
                    Int64 DayNo = Int64.Parse(((Label)row.FindControl("DayNoLabel")).Text);
                    GridView gr = ((GridView)row.FindControl("VehicleDtlsGridView"));
                    string[] TypeDistinct = { "ItineraryType" };
                    DataTable drf = dtVehicleCost.Select("DayNo=" + DayNo).CopyToDataTable();
                    gr.DataSource = dtVehicleCost.Select("DayNo=" + DayNo).CopyToDataTable().DefaultView.ToTable(true, TypeDistinct);
                    gr.DataBind();
                    foreach (GridViewRow grow in gr.Rows)
                    {
                        string ItineraryType = ((Label)grow.FindControl("OrgItineraryTypeLabel")).Text;
                        GridView grinner = ((GridView)grow.FindControl("VehicleFinalDtlsGridView"));
                        grinner.DataSource = dtVehicleCost.Select("DayNo=" + DayNo + "AND ItineraryType='" + ItineraryType + "'").CopyToDataTable();
                        grinner.DataBind();
                    }
                }

                #endregion

                #region Cost Details

                DataTable dt = new DataTable();
                dt.Columns.Add(new DataColumn("Type", typeof(string)));
                dt.Columns.Add(new DataColumn("TotalAmount", typeof(string)));
                dt.Columns.Add(new DataColumn("Discount", typeof(string)));
                dt.Columns.Add(new DataColumn("AmountAfterDiscount", typeof(string)));


                DataRow drd = dt.NewRow();
                drd["Type"] = "Accomadation";
                drd["TotalAmount"] = Decimal.Round(Decimal.Parse(dtAccDis.Rows[0]["TotalCost"].ToString() == "" ? "0.0000" : dtAccDis.Rows[0]["TotalCost"].ToString()), 2);
                drd["Discount"] = Decimal.Round(Decimal.Parse(dtAccDis.Rows[0]["Discount"].ToString() == "" ? "0.0000" : dtAccDis.Rows[0]["Discount"].ToString()), 2);
                drd["AmountAfterDiscount"] = Decimal.Round(Decimal.Parse(dtAccDis.Rows[0]["AmountAfterDiscount"].ToString() == "" ? "0.0000" : dtAccDis.Rows[0]["AmountAfterDiscount"].ToString()), 2);
                dt.Rows.Add(drd);


                DataRow drd2 = dt.NewRow();
                drd2["Type"] = "Vehicle Cost";
                drd2["TotalAmount"] = Decimal.Round(Decimal.Parse(dtVehicleDis.Rows[0]["TotalCost"].ToString() == "" ? "0.0000" : dtVehicleDis.Rows[0]["TotalCost"].ToString()), 2);
                drd2["Discount"] = Decimal.Round(Decimal.Parse(dtVehicleDis.Rows[0]["Discount"].ToString() == "" ? "0.0000" : dtVehicleDis.Rows[0]["Discount"].ToString()), 2);
                drd2["AmountAfterDiscount"] = Decimal.Round(Decimal.Parse(dtVehicleDis.Rows[0]["AmountAfterDiscount"].ToString() == "" ? "0.0000" : dtVehicleDis.Rows[0]["AmountAfterDiscount"].ToString()), 2);
                dt.Rows.Add(drd2);
                RapCostLabel.Text = Decimal.Round(Decimal.Parse(((DataTable)VehicleCost.Tables[2]).Rows[0]["RAPCOST"].ToString()), 2).ToString();
                CostDetailsGridView.DataSource = dt;
                CostDetailsGridView.DataBind();
                TotalAmountLabel.Text = Decimal.Round(Decimal.Parse(dt.Rows[0]["AmountAfterDiscount"].ToString()) + Decimal.Parse(dt.Rows[1]["AmountAfterDiscount"].ToString()) + Decimal.Round(Decimal.Parse(RapCostLabel.Text.Trim().ToString()), 2)).ToString();
                if (VehicleCost.Tables[3].Rows.Count > 0)
                {
                    PackageDiscountLabel.Text = ((Decimal.Parse(VehicleCost.Tables[3].Rows[0]["DiscountPercent"].ToString()) * decimal.Parse(TotalAmountLabel.Text.Trim())) / 100).ToString();
                }
                GrandTotalAmountLabel.Text = (decimal.Parse(TotalAmountLabel.Text) - decimal.Parse(PackageDiscountLabel.Text)).ToString();
                #endregion

                #region Configuration Details
                ArrivalDateLabel.Text = "Arrival Date Is : "+ArrivalDateTextBox.Text.Trim();
                AdultNumberLabel.Text = "No Of Adult Is : "+ NoOfAdultDropDownList.SelectedValue;
                ChildNumberLabel.Text = "No Of Child Is : " + NoOfChildDropDownList.SelectedValue;
                InfantNumberLabel.Text = "No Of Infant Is : " + NoOfInfantDropDownList.SelectedValue;
                #endregion
            }
            catch (Exception ex)
            {
                WebMessenger.Show(this, ex.Message, "Error", DialogTypes.Error);
                this.RegisterJS("$.fancybox.close();");
            }
            finally
            {
                objPackage = null;
            }
        }

        protected void AdvancePackageConfireButton_Click(object sender, EventArgs e)
        {
            objPackage = new TpkPackageMst();
            int TotalGuest = 0;
            TotalGuest = TotalGuest + int.Parse(AdvanceNoOfAdultDropDownList.SelectedValue);
            TotalGuest = TotalGuest + int.Parse(AdvanceNoOfChildDropDownList.SelectedValue);
            BasicAccPanel.Visible = false;
            AdvanceAccPanel.Visible = true;
            ResultTabOpenHiddenField.Value = "Open";
            try
            {
                #region Retrieve Data From Database In DataSet
                DataSet AccCost = objPackage.GetPackageAccomodationCostDetailsByAccID(Request.QueryString["TPKID"].ToString(), DateTime.Parse(string.Format("{0:dd-MMM-yyyy}", DateTime.Parse(AdvanceArrivalDateTextBox.Text.Trim()))), SelectAccomadationListHiddenField.Value, DayCountHiddenField.Value, AdvanceSelectedRoomListAdultHiddenField.Value, AdvanceSelectedRoomListChildHiddenField.Value, Int64.Parse(AdvanceRoomPlanDropDownList.SelectedValue), Session["BusinessID"].ToString());
                DataSet VehicleCost = objPackage.GetPackageItineraryVehicleCostDetails(Request.QueryString["TPKID"].ToString(), DateTime.Parse(string.Format("{0:dd-MMM-yyyy}", DateTime.Parse(AdvanceArrivalDateTextBox.Text.Trim()))), SelectedVehicleTypeHiddenField.Value, PaxListForVehicleHiddenField.Value, Session["BusinessID"].ToString(), TotalGuest);
                #endregion

                #region  Accomadation

                DataTable dtAccDis = AccCost.Tables[1];
                AdvanceAccPanel.Visible = true;
                DayAccDtlsGridView.DataSource = AccCost.Tables[2];
                DayAccDtlsGridView.DataBind();

                #endregion

                #region Vehicle

                DataTable dtVehicleCost = VehicleCost.Tables[0];
                DataTable dtVehicleDis = VehicleCost.Tables[1];

                string[] DayDistinct = { "DayNo" };
                DataTable dtDayList = dtVehicleCost.DefaultView.ToTable(true, DayDistinct);
                VehicleGridView.DataSource = dtDayList;
                VehicleGridView.DataBind();

                foreach (GridViewRow row in VehicleGridView.Rows)
                {
                    Int64 DayNo = Int64.Parse(((Label)row.FindControl("DayNoLabel")).Text);
                    GridView gr = ((GridView)row.FindControl("VehicleDtlsGridView"));
                    string[] TypeDistinct = { "ItineraryType" };
                    gr.DataSource = dtVehicleCost.Select("DayNo=" + DayNo).CopyToDataTable().DefaultView.ToTable(true, TypeDistinct);
                    gr.DataBind();
                    foreach (GridViewRow grow in gr.Rows)
                    {
                        string ItineraryType = ((Label)grow.FindControl("OrgItineraryTypeLabel")).Text;
                        GridView grinner = ((GridView)grow.FindControl("VehicleFinalDtlsGridView"));
                        grinner.DataSource = dtVehicleCost.Select("DayNo=" + DayNo + "AND ItineraryType='" + ItineraryType + "'").CopyToDataTable();
                        grinner.DataBind();
                    }
                }

                #endregion

                #region Cost Details

                DataTable dt = new DataTable();
                dt.Columns.Add(new DataColumn("Type", typeof(string)));
                dt.Columns.Add(new DataColumn("TotalAmount", typeof(string)));
                dt.Columns.Add(new DataColumn("Discount", typeof(string)));
                dt.Columns.Add(new DataColumn("AmountAfterDiscount", typeof(string)));


                DataRow drd = dt.NewRow();
                drd["Type"] = "Accomadation";
                drd["TotalAmount"] = Decimal.Round(Decimal.Parse(dtAccDis.Rows[0]["TotalCost"].ToString() == "" ? "0.0000" : dtAccDis.Rows[0]["TotalCost"].ToString()), 2);
                drd["Discount"] = Decimal.Round(Decimal.Parse(dtAccDis.Rows[0]["Discount"].ToString() == "" ? "0.0000" : dtAccDis.Rows[0]["Discount"].ToString()), 2);
                drd["AmountAfterDiscount"] = Decimal.Round(Decimal.Parse(dtAccDis.Rows[0]["AmountAfterDiscount"].ToString() == "" ? "0.0000" : dtAccDis.Rows[0]["AmountAfterDiscount"].ToString()), 2);
                dt.Rows.Add(drd);


                DataRow drd2 = dt.NewRow();
                drd2["Type"] = "Vehicle Cost";
                drd2["TotalAmount"] = Decimal.Round(Decimal.Parse(dtVehicleDis.Rows[0]["TotalCost"].ToString() == "" ? "0.0000" : dtVehicleDis.Rows[0]["TotalCost"].ToString()), 2);
                drd2["Discount"] = Decimal.Round(Decimal.Parse(dtVehicleDis.Rows[0]["Discount"].ToString() == "" ? "0.0000" : dtVehicleDis.Rows[0]["Discount"].ToString()), 2);
                drd2["AmountAfterDiscount"] = Decimal.Round(Decimal.Parse(dtVehicleDis.Rows[0]["AmountAfterDiscount"].ToString() == "" ? "0.0000" : dtVehicleDis.Rows[0]["AmountAfterDiscount"].ToString()), 2);
                dt.Rows.Add(drd2);

                RapCostLabel.Text = Decimal.Round(Decimal.Parse(((DataTable)VehicleCost.Tables[2]).Rows[0]["RAPCOST"].ToString()), 2).ToString();

                CostDetailsGridView.DataSource = dt;
                CostDetailsGridView.DataBind();
                TotalAmountLabel.Text = Decimal.Round(Decimal.Parse(dt.Rows[0]["AmountAfterDiscount"].ToString()) + Decimal.Parse(dt.Rows[1]["AmountAfterDiscount"].ToString()) + Decimal.Round(Decimal.Parse(RapCostLabel.Text.Trim().ToString()), 2)).ToString();
                if (VehicleCost.Tables[3].Rows.Count > 0)
                {
                    PackageDiscountLabel.Text = ((Decimal.Parse(VehicleCost.Tables[3].Rows[0]["DiscountPercent"].ToString()) * decimal.Parse(TotalAmountLabel.Text.Trim())) / 100).ToString();
                }
                GrandTotalAmountLabel.Text = (decimal.Parse(TotalAmountLabel.Text) - decimal.Parse(PackageDiscountLabel.Text)).ToString();

                #endregion


                #region Configuration Details
                ArrivalDateLabel.Text = "Arrival Date Is : " + AdvanceArrivalDateTextBox.Text.Trim();
                AdultNumberLabel.Text = "No Of Adult Is : " + AdvanceNoOfAdultDropDownList.SelectedValue;
                ChildNumberLabel.Text = "No Of Child Is : " + AdvanceNoOfChildDropDownList.SelectedValue;
                InfantNumberLabel.Text = "No Of Infant Is : " + AdvanceNoOfInfantDropDownList.SelectedValue;
                #endregion
            }
            catch (Exception ex)
            {
                WebMessenger.Show(this.Page, ex.Message, "Error", DialogTypes.Error);
                this.RegisterJS("$.fancybox.close();");
            }
            finally
            {
                objPackage = null;
            }
        }

        protected void SendMailButton_Click(object sender, EventArgs e)
        {
            ConvertToPdfDeatils();
        }

        #endregion

        #region Convert To Pdf ITextSharp 

        public override void VerifyRenderingInServerForm(Control control)
        //  this Event is must for Rendring
        {

        }

        protected void ConvertToPdfDeatils()
        {
            Document document = new Document();
            objPackage = new TpkPackageMst();
            try
            {
                iTextSharp.text.Font totalFont = FontFactory.GetFont("Helvetica", 20, new BaseColor(203, 57, 4));
                iTextSharp.text.Font headerFont = FontFactory.GetFont("Helvetica",20, new BaseColor(27, 150, 186));
                MemoryStream memoryStream = new MemoryStream();
                PdfWriter writer = PdfWriter.GetInstance(document, memoryStream);
               
                document.Open();

                #region Logo
                iTextSharp.text.Image logo = null;
                logo = iTextSharp.text.Image.GetInstance(Server.MapPath(@"~/App_Themes/AdminThemeDefault/Images/Logo.jpg"));
                document.Add(logo);

                #endregion

                #region Table for Package Photo Gallery Only Three Photos Allowed

                string header = "<div style='background-color: #5C5C5C; height: 40px; padding-left: 10px; font-size: 17px;font-weight: bold; width: 625px; line-height: 36px; margin: 10px;'> <div style='height: 26px; margin: 5px 0 9px; width: 26px; float: left;'></div><div style='height: 40px; width: 599px; float: left; line-height: 36px;'>" + PackageNameLabel.Text.Trim() + PackageDurationLabel.Text.Trim() + "</div> </div>";
                List<IElement> headerhtmlarraylist = HTMLWorker.ParseToList(new StringReader(header), null);
                for (int k = 0; k < headerhtmlarraylist.Count; k++)
                {
                    document.Add((IElement)headerhtmlarraylist[k]);
                }
                string html = HttpUtility.HtmlDecode(MailQueryHiddenField.Value);
                DataTable dt = (DataTable)Session["Image"];

                //Table for Package Photo Gallery Only Three Photos Allowed

                PdfPTable table = new PdfPTable(3);
                table.SpacingAfter = 15;
                PdfPCell cell1 = new PdfPCell();
                PdfPCell cell2 = new PdfPCell();
                PdfPCell cell3 = new PdfPCell();

                iTextSharp.text.Image gif1 = null, gif2 = null, gif3 = null;
                Byte[] bytes1 = (Byte[])dt.Rows[0]["PhotoThumb"];
                Byte[] bytes2 = (Byte[])dt.Rows[1]["PhotoThumb"];
                Byte[] bytes3 = (Byte[])dt.Rows[2]["PhotoThumb"];
                gif1 = iTextSharp.text.Image.GetInstance(bytes1);
                gif2 = iTextSharp.text.Image.GetInstance(bytes2);
                gif3 = iTextSharp.text.Image.GetInstance(bytes3);

                cell1.AddElement(gif1);
                cell2.AddElement(gif2);
                cell3.AddElement(gif3);
                table.AddCell(cell1);
                table.AddCell(cell2);
                table.AddCell(cell3);

                document.Add(table);
#endregion

                #region Package Details

                string itinearyHeader = "<div style='width: 625px;height:30px; margin: 0px 10px 10px 5px; font-weight: bold; font-size: 14pt;color: #1b96ba; height: 25px;'> Tour Package Details</div>";
                List<IElement> itineararyheaderhtmlarraylist = HTMLWorker.ParseToList(new StringReader(itinearyHeader), null);
                for (int k = 0; k < itineararyheaderhtmlarraylist.Count; k++)
                {
                    document.Add((IElement)itineararyheaderhtmlarraylist[k]);
                }

                PdfPTable tablePackage = new PdfPTable(2);
                tablePackage.DefaultCell.Border = 0;
                tablePackage.SpacingBefore = 20;
                tablePackage.SpacingAfter = 15;
                DataTable dtPackage = (DataTable)ViewState["PackageDetails"];
                foreach (DataRow dr in dtPackage.Rows)
                {
                    PdfPCell Packagecell1 = new PdfPCell();
                    Packagecell1.Border = 0;
                    PdfPCell Packagecell2 = new PdfPCell();
                    Packagecell2.Border = 0;
                    PdfPCell Packagecell3 = new PdfPCell();
                    Packagecell3.Border = 0;
                    PdfPCell Packagecell4 = new PdfPCell();
                    Packagecell4.Border = 0;
                    PdfPCell Packagecell5 = new PdfPCell();
                    Packagecell5.Border = 0;
                    PdfPCell Packagecell6 = new PdfPCell();
                    Packagecell6.Border = 0;
                    PdfPCell Packagecell7 = new PdfPCell();
                    Packagecell7.Border = 0;
                    PdfPCell Packagecell8 = new PdfPCell();
                    Packagecell8.Border = 0;
                    Packagecell1.AddElement(new Chunk("Package Description"));
                    Packagecell2.AddElement(new Chunk(dr["TpkDesc"].ToString()));
                    tablePackage.AddCell(Packagecell1);
                    tablePackage.AddCell(Packagecell2);

                    Packagecell3.AddElement(new Chunk("Destinations Covered"));
                    Packagecell4.AddElement(new Chunk(dr["TpkDestCovered"].ToString()));
                    tablePackage.AddCell(Packagecell3);
                    tablePackage.AddCell(Packagecell4);

                    Packagecell5.AddElement(new Chunk("PickUp Point"));
                    Packagecell6.AddElement(new Chunk(dr["TpkPickUpPoint"].ToString()));
                    tablePackage.AddCell(Packagecell5);
                    tablePackage.AddCell(Packagecell6);

                    Packagecell7.AddElement(new Chunk("Drop Point"));
                    Packagecell8.AddElement(new Chunk(dr["TpkDropPoint"].ToString()));
                    tablePackage.AddCell(Packagecell7);
                    tablePackage.AddCell(Packagecell8);
                }
                document.Add(tablePackage);
                #endregion

                document.NewPage();

                #region  Day-Wise Itinerary Details

                document.Add(new Paragraph("Day - Wise Itinerary Details", headerFont));
                document.Add(new Paragraph("\n", headerFont));

                StringWriter sw = new StringWriter();
                HtmlTextWriter hw = new HtmlTextWriter(sw);
                ItineraryDetailsFGridView.RenderControl(hw);
                StringReader sr = new StringReader(sw.ToString());

                HTMLWorker htmlparser = new HTMLWorker(document);
                htmlparser.Parse(sr);

                writer.CloseStream = false;
                #endregion

                document.NewPage();

                #region Accomadation

                document.Add(new Paragraph("Hotels Provided In Our Package", headerFont));
                document.Add(new Paragraph("\n", headerFont));
               
                DataTable dtAcc = new DataTable();
                int totalUser = 0;
                DateTime arrivalDate= DateTime.Now;
                if (BasicAccPanel.Visible == true)
                {
                     arrivalDate = DateTime.Parse(ArrivalDateTextBox.Text.Trim());
                     totalUser = int.Parse(NoOfAdultDropDownList.SelectedValue.ToString()) + int.Parse(NoOfChildDropDownList.SelectedValue.ToString());
                     dtAcc = objPackage.GetPackageAccomodationCostDetailsByAccType(Request.QueryString["TPKID"].ToString(), DateTime.Parse(string.Format("{0:dd-MMM-yyyy}", DateTime.Parse(ArrivalDateTextBox.Text.Trim()))), Int64.Parse(AccommodationTypeDropDownList.SelectedValue), Int64.Parse(RoomPlanDropDownList.SelectedValue.ToString()), SelectedRoomListAdultHiddenField.Value, SelectedRoomListChildHiddenField.Value, SelectedVehicleTypeHiddenField.Value, PaxListForVehicleHiddenField.Value, totalUser , Session["BusinessID"].ToString()).Tables[2];
                     string[] TobeDistinct = { "DestinationID", "DestinationName", "RoomPlanName" };
                     DataTable dtAccList = dtAcc.DefaultView.ToTable(true, TobeDistinct);
                     foreach (DataRow dr in dtAccList.Rows)
                     {
                         PdfPTable tableAcc = new PdfPTable(2);
                         tableAcc.DefaultCell.Border = 0;
                         Int64 destinationID = Int64.Parse(dr["DestinationID"].ToString());
                         PdfPCell AcccellDes = new PdfPCell();
                         PdfPCell AcccellPlan = new PdfPCell();
                         AcccellDes.AddElement(new Chunk("Destination :"+dr["DestinationName"].ToString()));
                         tableAcc.AddCell(AcccellDes);
                         AcccellPlan.AddElement(new Chunk("Plan Name :"+dr["RoomPlanName"].ToString()));
                         tableAcc.AddCell(AcccellPlan);
                         DataTable dtAccLoop = dtAcc.Select("DestinationID =" + destinationID).CopyToDataTable();
                         document.Add(tableAcc);
                         PdfPTable dtAccLoopPDF = new PdfPTable(3);
                         foreach (DataRow drd in dtAccLoop.Rows)
                         {
                             PdfPCell cellPdf1 = new PdfPCell();
                             PdfPCell cellPdf2 = new PdfPCell();
                             PdfPCell cellPdf3 = new PdfPCell();
                             iTextSharp.text.Image gifAcc = null;
                             gifAcc = iTextSharp.text.Image.GetInstance((Byte[])drd["ThumbImage"]);
                             cellPdf1.AddElement(gifAcc);
                             dtAccLoopPDF.AddCell(cellPdf1);
                             cellPdf2.AddElement(new Chunk(drd["AccName"].ToString()));
                             dtAccLoopPDF.AddCell(cellPdf2);
                             cellPdf3.AddElement(new Chunk(drd["AccAddress"].ToString()));
                             dtAccLoopPDF.AddCell(cellPdf3);
                         }
                         document.Add(dtAccLoopPDF);
                     }
                }
                else if (AdvanceAccPanel.Visible == true)
                {
                    arrivalDate = DateTime.Parse(AdvanceArrivalDateTextBox.Text.Trim());
                    totalUser = int.Parse(AdvanceNoOfAdultDropDownList.SelectedValue.ToString()) + int.Parse(AdvanceNoOfChildDropDownList.SelectedValue.ToString());
                    //dtAcc = objPackage.GetPackageAccomodationCostDetailsByAccID(Request.QueryString["TPKID"].ToString(), DateTime.Parse(string.Format("{0:dd-MMM-yyyy}", DateTime.Parse(AdvanceArrivalDateTextBox.Text.Trim()))), SelectAccomadationListHiddenField.Value, DayCountHiddenField.Value, AdvanceSelectedRoomListAdultHiddenField.Value, AdvanceSelectedRoomListChildHiddenField.Value, Int64.Parse(AdvanceRoomPlanDropDownList.SelectedValue), Session["BusinessID"].ToString()).Tables[2];
                    foreach (GridViewRow gr in DayAccDtlsGridView.Rows)
                    {
                        PdfPTable grDayTable = new PdfPTable(2);
                        grDayTable.DefaultCell.Border = 0;
                        grDayTable.AddCell(new Paragraph("Day " +((Label)gr.FindControl("AccDayNoLabel")).Text.ToString()));
                        grDayTable.AddCell(new Paragraph("Plan Name :"+((Label)gr.FindControl("PlanNameLabel")).Text.ToString()));
                        document.Add(grDayTable);
                        PdfPTable grAccTable = new PdfPTable(3);
                        iTextSharp.text.Image gifAcc = iTextSharp.text.Image.GetInstance((Byte[])Convert.FromBase64String(((Label)gr.FindControl("AccImageLabel")).Text));
                           
                        grAccTable.AddCell(gifAcc);
                        grAccTable.AddCell(new Paragraph("Accommadation Name :"+ ((Label)gr.FindControl("AccNameLabel")).Text.ToString()));
                        grAccTable.AddCell(new Paragraph("Details :"+((Label)gr.FindControl("AccDescLabel")).Text.ToString()));

                        document.Add(grAccTable);
                    }
                }
               
                #endregion

                document.NewPage();

                #region Day -Wise Vehicle Details

                document.Add(new Paragraph("Day - Wise Vehicle Details", headerFont));
                document.Add(new Paragraph("\n", headerFont));

                DataTable dtVeh = objPackage.GetPackageItineraryVehicleCostDetails(Request.QueryString["TPKID"].ToString(), DateTime.Parse(string.Format("{0:dd-MMM-yyyy}",arrivalDate)), SelectedVehicleTypeHiddenField.Value, PaxListForVehicleHiddenField.Value, Session["BusinessID"].ToString(), totalUser).Tables[0];
                string[] DayDistinct = { "DayNo" };
                DataTable dtDayList = dtVeh.DefaultView.ToTable(true, DayDistinct);
                
                foreach (DataRow row in dtDayList.Rows)
                {
                    PdfPTable tableDay = new PdfPTable(1);
                    PdfPCell tbCell = new PdfPCell();
                    int DayNo = int.Parse(row["DayNo"].ToString()); 
                    tbCell.AddElement(new Chunk("Day " +row["DayNo"].ToString()));
                    tableDay.AddCell(tbCell);
                    document.Add(tableDay);
                    string[] TypeDistinct = { "ItineraryType" };
                    DataTable dtType = dtVeh.Select("DayNo=" + DayNo).CopyToDataTable().DefaultView.ToTable(true, TypeDistinct);
                    foreach (DataRow row1 in dtType.Rows)
                    {
                        string itinearyType = row1["ItineraryType"].ToString();
                        PdfPTable tableType = new PdfPTable(1);
                        PdfPCell tabCell = new PdfPCell();
                        if (row1["ItineraryType"].ToString() == "SS")
                        {
                            tabCell.AddElement(new Chunk("Sight Seen"));
                        }
                        else if (row1["ItineraryType"].ToString() == "TR")
                        {
                            tabCell.AddElement(new Chunk("Transfer"));
                        }
                        else
                        {
                            tabCell.AddElement(new Chunk(""));
                        }
                        tableType.AddCell(tabCell);
                        document.Add(tableType);
                        DataTable dtVehicle = dtVeh.Select("DayNo="+ DayNo +"AND ItineraryType='"+itinearyType+"'").CopyToDataTable();
                        PdfPTable vehicleTable = new PdfPTable(3);
                        foreach (DataRow row2 in dtVehicle.Rows)
                        {
                            PdfPCell cellPdf1 = new PdfPCell();
                            PdfPCell cellPdf2 = new PdfPCell();
                            PdfPCell cellPdf3 = new PdfPCell();
                            iTextSharp.text.Image gifAcc = null;
                            gifAcc = iTextSharp.text.Image.GetInstance((Byte[])row2["VehicleImgThumb"]);
                            cellPdf1.AddElement(gifAcc);
                            vehicleTable.AddCell(cellPdf1);
                            cellPdf2.AddElement(new Chunk("VehicleType   :" + row2["VehicleName"].ToString()));
                            vehicleTable.AddCell(cellPdf2);
                            cellPdf3.AddElement(new Chunk("Remarks  :"+ row2["Remarks"].ToString()));
                            vehicleTable.AddCell(cellPdf3);
                        }
                        document.Add(vehicleTable);
                    }
                }

                #endregion

                document.NewPage();

                #region Cost Details

                document.Add(new Paragraph("Cost Details", headerFont));

                document.Add(new Paragraph("\n", headerFont));



                PdfPTable headerTable = new PdfPTable(4);
               
                headerTable.AddCell(new Paragraph("Type"));
                headerTable.AddCell(new Paragraph("Total"));
                headerTable.AddCell(new Paragraph("Discount"));
                headerTable.AddCell(new Paragraph("Amount After Discount"));
                //document.Add(headerTable);
                foreach (GridViewRow rw in CostDetailsGridView.Rows)
                {
                    headerTable.AddCell(new Paragraph(((Label)rw.FindControl("TypeLabel")).Text));
                    headerTable.AddCell(new Paragraph(((Label)rw.FindControl("TotalCostLabel")).Text));
                    headerTable.AddCell(new Paragraph(((Label)rw.FindControl("DiscountAmountLabel")).Text));
                   
                    headerTable.AddCell(new Paragraph(((Label)rw.FindControl("AmountAfterDiscountLabel")).Text));
                    
                }
                document.Add(headerTable);


                PdfPTable costTable = new PdfPTable(2);
               
                costTable.DefaultCell.Border = 0;
                PdfPCell RapCost = new PdfPCell();
                RapCost.Border = 0;
                RapCost.HorizontalAlignment = Element.ALIGN_RIGHT;
                RapCost.AddElement(new Paragraph("Extras/ Rap Cost:" + RapCostLabel.Text));
                costTable.AddCell(new Paragraph(""));
                costTable.AddCell(RapCost);

                PdfPCell PakDis = new PdfPCell();
                PakDis.Border = 0;
                PakDis.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                PakDis.AddElement(new Paragraph("Package Discount:" + PackageDiscountLabel.Text.Trim()));
                costTable.AddCell(new Paragraph(""));
                costTable.AddCell(PakDis);

                PdfPCell grandTotal = new PdfPCell();
                grandTotal.Border = 0;
                grandTotal.HorizontalAlignment = Element.ALIGN_RIGHT;
                grandTotal.AddElement(new Paragraph("Grand Total:" + GrandTotalAmountLabel.Text, totalFont));
                costTable.AddCell(new Paragraph(""));
                costTable.AddCell(grandTotal);

                document.Add(costTable);
                #endregion

                document.NewPage();
                #region  Business Information
                DataTable dP = (DataTable)ViewState["PackageDetails"];
                string ContactHeader = "<div style='width: 625px;height:30px; margin: 0px 10px 10px 5px; font-weight: bold; font-size: 14pt;color: #1b96ba; height: 25px;'> Contact Details </div>";
                List<IElement> contactheaderhtmlarraylist = HTMLWorker.ParseToList(new StringReader(ContactHeader), null);
                for (int k = 0; k < contactheaderhtmlarraylist.Count; k++)
                {
                    document.Add((IElement)contactheaderhtmlarraylist[k]);
                }


                PdfPTable dptable = new PdfPTable(2);
                if (dP.Rows.Count > 0)
                {
                    PdfPCell dpCell1 = new PdfPCell(new Phrase("Travel Agent Name"));
                    dpCell1.Border = 0;
                    PdfPCell dpCell2 = new PdfPCell(new Phrase(dP.Rows[0]["BusName"].ToString()));
                    dpCell2.Border = 0;
                    PdfPCell dpCell3 = new PdfPCell(new Phrase("Address"));
                    PdfPCell dpCell4 = new PdfPCell(new Phrase(dP.Rows[0]["BusAddress"].ToString() + dP.Rows[0]["BusCity"].ToString()));
                    PdfPCell dpCell5 = new PdfPCell(new Phrase("Website: "));
                    PdfPCell dpCell6 = new PdfPCell(new Phrase(dP.Rows[0]["BusWebsite"].ToString()));
                    PdfPCell dpCell7 = new PdfPCell(new Phrase("Contact Person Name "));
                    PdfPCell dpCell8 = new PdfPCell(new Phrase(dP.Rows[0]["ContactPersonName"].ToString()));
                    PdfPCell dpCell9 = new PdfPCell(new Phrase("Contact Number"));
                    PdfPCell dpCell10 = new PdfPCell(new Phrase(dP.Rows[0]["ContactMobileNo"].ToString()));
                    dpCell3.Border = 0;
                    dpCell4.Border = 0;
                    dpCell5.Border = 0;
                    dpCell6.Border = 0;
                    dpCell7.Border = 0;
                    dpCell8.Border = 0;
                    dpCell9.Border = 0;
                    dpCell10.Border = 0;
                    dptable.AddCell(dpCell1);
                    dptable.AddCell(dpCell2);
                    dptable.AddCell(dpCell3);
                    dptable.AddCell(dpCell4);
                    dptable.AddCell(dpCell5);
                    dptable.AddCell(dpCell6);
                    dptable.AddCell(dpCell7);
                    dptable.AddCell(dpCell8);
                    dptable.AddCell(dpCell9);
                    dptable.AddCell(dpCell10);
                    dptable.SpacingBefore = 20;
                    document.Add(dptable);
                    document.Close();
                }
                #endregion

                memoryStream.Position = 0;

                SendEmail.SendMail(MailAddressHiddenField.Value, "eTravel", MessageHiddenField.Value, new Attachment(memoryStream, "eTravel.pdf"));
                WebMessenger.Show(this, "Tour Package Details Email To The Client Successfully", "Mail Sent Successfully", DialogTypes.Success);
            }
            catch (Exception ex)
            {
                WebMessenger.Show(this, "Error While Converting Pdf File", "Error", DialogTypes.Error);
            }
            finally
            {
                ResultTabOpenHiddenField.Value = "";
                this.RegisterJS("$.fancybox.close();");
                this.RegisterJS("$('[id$=ucGridUpdateProgress]').css('display','none');");
            }

        }

        #endregion

        #region Check BusinessID
        protected void checkBusinessID()
        {
            if (Session["BusinessID"] == null)
            {
                if (Request.Cookies["BusinessID"] != null)
                {
                    Session["BusinessID"] = Request.Cookies["BusinessID"].Value.ToString();
                }
                else
                {
                    if (Page.User.Identity.Name != "")
                    {
                        if (User.IsInRole("BusinessAdmin"))
                        {
                            Session["BusinessID"] = HttpContext.Current.Profile.GetPropertyValue("BusinessID").ToString();
                        }
                    }
                }
                Response.Redirect("~/PortalAdmin/RegisterBusiness.aspx");
            }
        }
        #endregion
    }
}