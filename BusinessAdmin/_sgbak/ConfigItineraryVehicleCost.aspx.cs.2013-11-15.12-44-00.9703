using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using e_Travel.Class;
using e_TravelBLL.TourPackage;
using System.Data;
using SIBINUtility.ValidatorClass;
using Sibin.ExceptionHandling.ExceptionHandler;
using System.Data.SqlClient;
using Newtonsoft.Json;

namespace e_Travel.BusinessAdmin
{
    public partial class ConfigItineraryVehicleCost : AdminBasePage
    {
        #region Private Variables
        ItineraryMstBLL objItineraryMstBLL;
 
        PtlAdmVehicleTypeMasterBLL objPtlAdmVehicleTypeMasterBLL;
        #endregion

        #region Gridview Events and Load GridView
        private void BindEvents()
        {
            ItineraryVehicleCostCustomGridView.ucGridView_SelectedIndexChanging += new GridViewSelectEventHandler(ItineraryVehicleCostCustomGridView_SelectedIndexChanging);
            ItineraryVehicleCostCustomGridView.ucGridView_RowDeleting += new GridViewDeleteEventHandler(ItineraryVehicleCostCustomGridView_RowDeleting);
            ItineraryVehicleCostCustomGridView.DataSource += new SIBINUtility.UserControl.GridView.ucGridView.GridViewDataSource(LoadGridView);
        }

        protected void ItineraryVehicleCostCustomGridView_SelectedIndexChanging(object sender, GridViewSelectEventArgs e)
        {
            DisableInputControls();
            ClearInputControls();
            Session["OpernType"] = null;
            SelectedItineraryHiddenField.Value= HttpUtility.HtmlDecode(ItineraryVehicleCostCustomGridView.DataKeys[e.NewSelectedIndex].Values["ItineraryID"].ToString());
            ItinearyHeadingTextBox.Text = HttpUtility.HtmlDecode(ItineraryVehicleCostCustomGridView.Rows[e.NewSelectedIndex].Cells[1].Text);
            ItineraryDetailTextBox.Text = HttpUtility.HtmlDecode(ItineraryVehicleCostCustomGridView.DataKeys[e.NewSelectedIndex].Values["ItineraryDetail"].ToString());
            GetAllVehicleCostDetailsByItinearyID(SelectedItineraryHiddenField.Value);
        }

        protected void ItineraryVehicleCostCustomGridView_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            objBusAdmConfigItineraryVehicleCostBLL = new BusAdmConfigItineraryVehicleCostBLL();
            try
            {
                objBusAdmConfigItineraryVehicleCostBLL.DeleteItineraryVehicleCost(ItineraryVehicleCostCustomGridView.DataKeys[e.RowIndex].Values["ItineraryID"].ToString(), Page.User.Identity.Name);
                ItineraryVehicleCostCustomGridView.BindData();
                WebMessenger.Show(this, "Itinerary Vehicle Cost Configuration  Deleted Successfully", "Deleted", DialogTypes.Success);
            }
            catch (Exception ex)
            {
                UserInterfaceExceptionHandler.HandleException(ref ex);
                Session["OpernType"] = null;
                WebMessenger.Show(this, "Unable To Delete Itinerary Vehicle Cost Configuration  At This Moment", "Error", DialogTypes.Error);
            }
            finally
            {
                objBusAdmConfigItineraryVehicleCostBLL = null;
            }
        }

        private DataTable LoadGridView()
        {
            objBusAdmConfigItineraryVehicleCostBLL = new BusAdmConfigItineraryVehicleCostBLL();
            DataTable dtRec = new DataTable();
            try
            {
                int startRowIndex = (ItineraryVehicleCostCustomGridView.PageIndex * ItineraryVehicleCostCustomGridView.PageSize) + 1;
                dtRec = objBusAdmConfigItineraryVehicleCostBLL.GetAllItineraryVehicleCostPaged(startRowIndex, ItineraryVehicleCostCustomGridView.PageSize, Session["BusinessID"].ToString());
                if (dtRec.Rows.Count > 0)
                {
                    ItineraryVehicleCostCustomGridView.TotalRecordCount = int.Parse(dtRec.Rows[0]["TotalRows"].ToString());
                }
            }
            catch (Exception)
            {
                WebMessenger.Show(this, "Unable To Load Itinerary Vehicle Cost Configuration List At This Moment", "Error", DialogTypes.Error);
            }
            finally
            {
                objBusAdmConfigItineraryVehicleCostBLL = null;
            }
            return dtRec;
        }
        #endregion

        #region Page Load
        protected void Page_Load(object sender, EventArgs e)
        {
            BindEvents();
            checkBusinessID();
            if (!IsPostBack)
            {
                   
                   ItineraryVehicleCostCustomGridView.AddGridViewColumns("Itinerary Detail", "ItineraryHeading", "700", "ItineraryID|ItineraryDetail", true, true);
                    ItineraryVehicleCostCustomGridView.BindData();
                    AutosuggestItinerary();
                    LoadAllVehicleType();
                    DisableInputControls();
                    ClearInputControls();
               
            }

        }
        #endregion

        #region Button Click Events
        protected void AddButton_Click(object sender, EventArgs e)
        {
            EnableInputControls();
            ClearInputControls();
            ItinearyHeadingTextBox.Focus();
            this.Session["OpernType"] = "Add";
        }

        protected void EditButton_Click(object sender, EventArgs e)
        {
            if (ItineraryVehicleCostCustomGridView.SelectedDataKey == null)
            {
                WebMessenger.Show(this, "Select A Record From List First", "Information", DialogTypes.Information);
                return;
            }
            else
            {
                EnableInputControls();
                ItinearyHeadingTextBox.Focus();
                this.Session["OpernType"] = "Edit";
            }
        }

        protected void SaveButton_Click(object sender, EventArgs e)
        {
            VehicleDetailsHiddenFiled.Value = "";
            objBusAdmConfigItineraryVehicleCostBLL = new BusAdmConfigItineraryVehicleCostBLL();
            //Validation            
            if (ItinearyHeadingTextBox.Text == "")
            {
                WebMessenger.Show(this, "Invalid  Itinerary  ", "Information", DialogTypes.Information);
                ItinearyHeadingTextBox.Focus();
                return;
            }
            foreach (GridViewRow row in VehicleListGridView.Rows)
            {
                
                CheckBox cbk = (CheckBox)row.FindControl("IsApplicableCheckBox");
                if (cbk.Checked == true)
                { 
                    string vehicleid=null,vehicleName;
                    decimal costrate,sellrate;
                    vehicleid = ((Label)row.FindControl("VehicleTypeIDLabel")).Text.ToString();
                    vehicleName = ((Label)row.FindControl("VehicleNameLabel")).Text.ToString();
                    if (((TextBox)row.FindControl("CostPriceTextBox")).Text.ToString().Trim() == "")
                    {
                        WebMessenger.Show(this, "Provide Cost Rate for Vehicle :" + vehicleName, "Information", DialogTypes.Information);
                        return;
                    }
                    else if (!ValidatorClass.IsNumeric(((TextBox)row.FindControl("CostPriceTextBox")).Text.ToString().Trim()))
                    {
                        WebMessenger.Show(this, "Invalid Input In Cost Price  Field of Vehicle "+ vehicleName, "Invalid", DialogTypes.Information);
                        return;
                    }
                    if (((TextBox)row.FindControl("SellPriceTextBox")).Text.ToString().Trim() == "")
                    {
                        WebMessenger.Show(this, "Provide Selling  Rate for Vehicle :" + vehicleName, "Information", DialogTypes.Information);
                        return;
                    }
                    else if (!ValidatorClass.IsNumeric(((TextBox)row.FindControl("SellPriceTextBox")).Text.ToString().Trim()))
                    {
                        WebMessenger.Show(this, "Invalid Input In Selling Price  Field of Vehicle "+ vehicleName, "Invalid", DialogTypes.Information);
                        return;
                    }
                    costrate = decimal.Parse(((TextBox)row.FindControl("CostPriceTextBox")).Text.ToString().Trim());
                    sellrate = decimal.Parse(((TextBox)row.FindControl("SellPriceTextBox")).Text.ToString().Trim());
                    VehicleDetailsHiddenFiled.Value = VehicleDetailsHiddenFiled.Value + vehicleid + "," + costrate + "," + sellrate + "|";                  
                }
            }
            try
            {
                if (Page.IsValid)
                {
                    if (Session["OpernType"] != null)
                    {
                        if (Session["OpernType"].ToString() == "Add")
                        {
                            string VehicleTypeIDList = "";
                            objBusAdmConfigItineraryVehicleCostBLL.AddItineraryVehicleCost(Session["BusinessID"].ToString(), SelectedItineraryHiddenField.Value, VehicleDetailsHiddenFiled.Value, null, null, Page.User.Identity.Name);
                            ItineraryVehicleCostCustomGridView.BindData();
                            ClearInputControls();
                            DisableInputControls();
                            Session["OpernType"] = null;
                            WebMessenger.Show(this, "Itinerary Added Sucessfully", "Success", DialogTypes.Success);
                        }
                        else if (Session["OpernType"].ToString() == "Edit")
                        {
                            string VehicleTypeIDList = "";
                            objBusAdmConfigItineraryVehicleCostBLL.EditItineraryVehicleCost(Session["BusinessID"].ToString(), SelectedItineraryHiddenField.Value, VehicleDetailsHiddenFiled.Value, null, null, Page.User.Identity.Name);
                            ItineraryVehicleCostCustomGridView.BindData();
                            ClearInputControls();
                            DisableInputControls();
                            Session["OpernType"] = null;
                            WebMessenger.Show(this, "Itinerary Updated Sucessfully", "Success", DialogTypes.Success);
                        }
                        else
                        {
                            WebMessenger.Show(this, "Invalid Operation", "Operation", DialogTypes.Information);
                            ClearInputControls();
                            DisableInputControls();
                            Session["OpernType"] = null;
                        }
                    }
                    else
                    {
                        WebMessenger.Show(this, "Select A Operation First", "Information", DialogTypes.Information);
                        return;
                    }
                }
                else
                {
                    WebMessenger.Show(this, "Invalid Operation", "Operation", DialogTypes.Information);
                    ClearInputControls();
                    DisableInputControls();
                    Session["OpernType"] = null;
                }
            }
            catch (Exception ex)
            {
                UserInterfaceExceptionHandler.HandleException(ref ex);
                Session["OpernType"] = null;
                WebMessenger.Show(this, ex.Message, "Error", DialogTypes.Error);
            }
            finally
            {
                objBusAdmConfigItineraryVehicleCostBLL = null;
            }
        }

        protected void ClearButton_Click(object sender, EventArgs e)
        {
            ClearInputControls();
            DisableInputControls();
            this.Session["OpernType"] = null;
        }
        #endregion

        #region Enable/Disable/Clear Form Elements
        private void EnableInputControls()
        {
            ItinearyHeadingTextBox.Enabled = true;
            ItineraryDetailTextBox.Enabled = true;
            foreach (GridViewRow row in VehicleListGridView.Rows)
            {
               if (((CheckBox)row.FindControl("IsApplicableCheckBox")).Checked==true)
               {
                ((TextBox)row.FindControl("CostPriceTextBox")).Enabled = true;
                ((TextBox)row.FindControl("SellPriceTextBox")).Enabled = true;  
               }
               ((CheckBox)row.FindControl("IsApplicableCheckBox")).Enabled = true; 
            }
        }

        private void DisableInputControls()
        {
            ItinearyHeadingTextBox.Enabled = false;
            ItineraryDetailTextBox.Enabled = false;
            foreach (GridViewRow row in VehicleListGridView.Rows)
            {
                ((TextBox)row.FindControl("CostPriceTextBox")).Enabled = false;
                ((TextBox)row.FindControl("SellPriceTextBox")).Enabled = false;
                ((CheckBox)row.FindControl("IsApplicableCheckBox")).Enabled = false; 
            }
        }

        private void ClearInputControls()
        {
            ItinearyHeadingTextBox.Text = "";
            ItineraryDetailTextBox.Text = "";
            SelectedItineraryHiddenField.Value = "";
            foreach (GridViewRow row in VehicleListGridView.Rows)
            {
                ((TextBox)row.FindControl("CostPriceTextBox")).Text = "";
                ((TextBox)row.FindControl("SellPriceTextBox")).Text = "";
            }
        }
        #endregion
        private void LoadAllVehicleType()
        {
            objPtlAdmVehicleTypeMasterBLL = new PtlAdmVehicleTypeMasterBLL();
            try
            {
                DataTable dt = objPtlAdmVehicleTypeMasterBLL.GetVehicleType();
                dt.Columns.Add(new DataColumn("ItinerarySellPrice", typeof(string)));
                dt.Columns.Add(new DataColumn("ItineraryCostPrice", typeof(string)));
                VehicleListGridView.DataSource = dt;
                VehicleListGridView.DataBind();
            }
            catch (Exception ex)
            {
                WebMessenger.Show(this, "Unable To Load All Vehicle Type At This Moment", "Error", DialogTypes.Error);
                return;
            }
            finally
            {
                objPtlAdmVehicleTypeMasterBLL = null;
            }

        }       

        public void AutosuggestItinerary()
        {
            objItineraryMstBLL = new ItineraryMstBLL();
            try
            {
                DataTable dt = objItineraryMstBLL.GetItinerary(Session["BusinessID"].ToString());
                string json = Server.HtmlDecode(JsonConvert.SerializeObject(dt));
                ItineraryListHiddenField.Value = json;
            }
            catch (Exception ex)
            {
                WebMessenger.Show(this, "Unable To Load Itineary List at this Moment", "Error", DialogTypes.Error);
                return;
            }
        }

        protected void IsApplicableCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox btn = sender as CheckBox;
            if (btn.Checked == false)
            {
                int iRowIndex = (((CheckBox)sender).Parent.Parent as GridViewRow).RowIndex;
                ((TextBox)VehicleListGridView.Rows[iRowIndex].FindControl("CostPriceTextBox")).Enabled = false;
                ((TextBox)VehicleListGridView.Rows[iRowIndex].FindControl("SellPriceTextBox")).Enabled = false;
            }
            else
            {
                int iRowIndex = (((CheckBox)sender).Parent.Parent as GridViewRow).RowIndex;
                ((TextBox)VehicleListGridView.Rows[iRowIndex].FindControl("CostPriceTextBox")).Enabled = true;
                ((TextBox)VehicleListGridView.Rows[iRowIndex].FindControl("SellPriceTextBox")).Enabled = true;
            }
        }

        protected void GetAllVehicleCostDetailsByItinearyID(string ItinearyID)
        {
            objItineraryMstBLL = new ItineraryMstBLL();
            try
            {
                DataTable foundVehicle = new DataTable();
                DataTable dt = objItineraryMstBLL.GetAllVehicleCostDetaislByItineraryID(ItinearyID);
                foreach (GridViewRow row in VehicleListGridView.Rows)
                {
                    Int64 vehicleID = Int64.Parse(((Label)row.FindControl("VehicleTypeIDLabel")).Text);
                    if (dt.Select("VehicleTypeID=" + vehicleID).Count() > 0)
                    {
                        foundVehicle = dt.Select("VehicleTypeID=" + vehicleID).CopyToDataTable();
                    }
                    if (foundVehicle.Rows.Count > 0)
                    {
                        ((TextBox)row.FindControl("CostPriceTextBox")).Text = foundVehicle.Rows[0]["ItineraryCostPrice"].ToString();
                        ((TextBox)row.FindControl("SellPriceTextBox")).Text = foundVehicle.Rows[0]["ItinerarySellPrice"].ToString();
                        ((CheckBox)row.FindControl("IsApplicableCheckBox")).Checked = true;
                    }
                    else
                    {
                        ((TextBox)row.FindControl("CostPriceTextBox")).Enabled=false;
                        ((TextBox)row.FindControl("SellPriceTextBox")).Enabled = false;
                        ((CheckBox)row.FindControl("IsApplicableCheckBox")).Checked = false;
                    }
                }
            }
            catch (Exception ex)
            {
                WebMessenger.Show(this, "Unable To Load Vehicle Cost Details By Itineary","Error" ,DialogTypes.Error);
            }
        }
        protected void checkBusinessID()
        {
            if (Session["BusinessID"] == null)
            {
                if (Request.Cookies["BusinessID"] != null)
                {
                    Session["BusinessID"] = Request.Cookies["BusinessID"].Value.ToString();
                }
                else
                {
                    if (Page.User.Identity.Name != "")
                    {
                        if (User.IsInRole("BusinessAdmin"))
                        {
                            Session["BusinessID"] = HttpContext.Current.Profile.GetPropertyValue("BusinessID").ToString();
                        }
                    }
                }
                Response.Redirect("~/PortalAdmin/RegisterBusiness.aspx");
            }
        }

    }
}